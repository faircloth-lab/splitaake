# ===========================
# = Multiprocessing options =
# ===========================

[Multiprocessing]
# Here you can set whether you want to use multiprocessing
# (typically you do).  You can let the program automatically determine
# the optimum number of cores to use (max[cores] - 2) or you can set the
# number of cores manually, e.g. to `4`.  Regardless of what you do here
# the program will use n - 1 cores to process data and 1 core to enter
# data to the database.  Should you wish to change this behavior, you
# will need to edit the source.
#
# If you edit the source, remember that SQLITE (the database we're using) 
# will not accept input from multiple processes/threads simultaneously.  Thus,
# you will likely have to create a new demuxi/db.py file for your respective
# database platform.
MULTIPROCESSING     = True
CORES               = 1

[Database]
# The name of your database. If you would like to store this somewhere
# other than where this configuration files is located, prepend the 
# database name with the desired path.  The database engine is SQLITE.
# You may alter the database engine by writing your own demuxi/db.conf.
DATABASE            = True
NAME                = test.sqlite

[Sequence]
# paths to the input fasta and qual files
r1 = /nfs/data1/working/tglenn-2rad/test/croc-porosus-2621-PN_S12_L001_R1_001.fastq
r2 = /nfs/data1/working/tglenn-2rad/test/croc-porosus-2621-PN_S12_L001_R2_001.fastq

[QualitySetup]
# Trim reads by quality scores (prior to looking for sequence tags)
Trim                    = True
Min                     = 10
DropN			        = True

[TagSetup]
TrimType                = Both
5pBuffer                = 0
3pBuffer                = 0
ThreePrimeOrientation   = Forward
FuzzyMatching           = True
AllowedErrors           = 1

[SiteSetup]
Forward:TGCA
Reverse:AT
5pBuffer:3
3pBuffer:0
FuzzyMatching:FALSE
AllowedErrors:0

[Combinations]
R1T1,R2T1 = croc

[TagSequences]
R1T1 = ACTG
R1T2 = CGAT
R1T3 = GTCA
R1T4 = TAGC
R2T1 = CGAT
R2T2 = GTCA
R2T3 = TAGC
R2T4 = ACTG
