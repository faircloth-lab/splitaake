# ===========================
# = Multiprocessing options =
# ===========================

[Multiprocessing]
# Here you can set whether you want to use multiprocessing
# (typically you do).  You can let the program automatically determine
# the optimum number of cores to use (max[cores] - 2) or you can set the
# number of cores manually, e.g. to `4`.  Regardless of what you do here
# the program will use n - 1 cores to process data and 1 core to enter
# data to the database.  Should you wish to change this behavior, you
# will need to edit the source.
#
# If you edit the source, remember that SQLITE (the database we're using) 
# will not accept input from multiple processes/threads simultaneously.  Thus,
# you will likely have to create a new demuxi/db.py file for your respective
# database platform.
MULTIPROCESSING     = False
PROCESSORS          = 1

[Database]
# The name of your database. If you would like to store this somewhere
# other than where this configuration files is located, prepend the 
# database name with the desired path.  The database engine is SQLITE.
# You may alter the database engine by writing your own demuxi/db.conf.
DATABASE            = True
NAME                = run2-L001-001.sqlite

[Sequence]
# paths to the input fasta and qual files
r1 = 'wares_ATCACGATCT_L001_R1_001.fastq'
r2 = 'wares_ATCACGATCT_L001_R2_001.fastq'

[Quality]
# Trim reads by quality scores (prior to looking for sequence tags)
QualTrim                = True
MinQualScore            = 10
DropN			        = True

[Cut Sites]
Forward:TGCA
Reverse:AT
Buffer:3
FuzzyMatching:FALSE
AllowedErrors:0

[Search]

SearchFor               = InnerCombinatorial

[InnerTags]
# Set the parameters for the *inner* tag (if hierarchical tagging)
# below.
Search                  = True
TrimType                = Both
Buffer                  = 0
ThreePrimeOrientation   = Forward
Trim                    = 0
FuzzyMatching           = True
AllowedErrors           = 1


# =======================
# = Sequence Tag Groups =
# =======================

[InnerCombinatorial]
T1Tag,R2Tag = croc


## Sequence Tag Section (ADVANCED)

[InnerTagSequences]
# A full list of linker tags.  There may be more linker tags listed here than 
# used in the [LinkerGroups] or [MidLinkerGroups] section.  When you run the
# program, it will intelligently create the lists of linkers that you need
# according to the cluster variables you declare in [LinkerGroups] or 
# [MidLinkerGroups]
#
# The only slowdown caused by having a long list of tags here occurs when you 
# run `levenshtein.py` on this file, because it will check all of the tags in 
# the appropriate list for the section chosen.
#
# The longer the tag sequence used, the slower the search for that sequence when 
# using 'fuzzy'-matching.  Thus, if you are using tags that all
# share common elements, you do not need to search for those elements, because 
# they do not differentiate your tags in any manner.  Rather, you can exlude 
# them, and use the MidGap and LinkerGap parameters in the [GeneralParameters] 
# section to exclude these regions
R1Tag = TGCAT
R2Tag = ATCTG

