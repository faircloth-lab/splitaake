# ===========================
# = Multiprocessing options =
# ===========================

[Multiprocessing]
# Here you can set whether you want to use multiprocessing
# (typically you do).  You can let the program automatically determine
# the optimum number of cores to use (max[cores] - 2) or you can set the
# number of cores manually, e.g. to `4`.  Regardless of what you do here
# the program will use n - 1 cores to process data and 1 core to enter
# data to the database.  Should you wish to change this behavior, you
# will need to edit the source.
#
# If you edit the source, remember that SQLITE (the database we're using) 
# will not accept input from multiple processes/threads simultaneously.  Thus,
# you will likely have to create a new demuxi/db.py file for your respective
# database platform.
MULTIPROCESSING     = True
PROCESSORS          = 6

[Database]
# The name of your database. If you would like to store this somewhere
# other than where this configuration files is located, prepend the 
# database name with the desired path.  The database engine is SQLITE.
# You may alter the database engine by writing your own demuxi/db.conf.
DATABASE            = run2-L001-001.sqlite

[Sequence]
# paths to the input fasta and qual files
r1 = 'wares_ATCACGATCT_L001_R1_001.fastq'
r2 = 'wares_ATCACGATCT_L001_R2_001.fastq'

[Quality]
# Trim reads by quality scores (prior to looking for sequence tags)
QualTrim                = True
MinQualScore            = 10
DropN			= True
[Concatemers]
# We can implement checking for concatemers (a linker within a sequence)
# but it is slow, particularly if we allow errors withint the concatemer
# sequence.
#
# Here, we ONLY search for concatemers containing the Linker sequences.
#
# Additionally, if you enable the option to allow errors, you
# should keep the error count low or you will start matching parts of
# your reads, which will be confusing.
ConcatemerChecking      = True
# By default, we just use regular expressions to match reads with exact
# matches to the adapters within them.
ConcatemerFuzzyMatching = True
ConcatemerAllowedErrors = 1

[Primers]
Forward:AGAGTTTGATCCTGGCTCAG
Reverse:TGCTGCCTCCCGTAGGAGT
Buffer:3
FuzzyMatching:True
AllowedErrors:2

[Search]
# Give the combination of tags to search for:
#
# 1) OuterInnerGroups - the typical hierarchical tagging pattern.
# Identifies reads using an outer + inner tag.
#
# 2) InnerGroups - those reads having only "inner" tags,
# Identifies reads using only the inner tag.
#
# 3) OuterGroups - those reads having only "outer" tags.
# Idenfified reads using only the outer tag.
#
# You may select either of InnerGroups or OuterGroups if
# you are only using 1 tag to identify your reads.  However, ensure that
# you have provided the correct options below for the appropriate
# tags [OuterTags] or [InnerTags] and mapping of group names to tag
# combinations [OuterGroups], [InnerGroups], [OuterInnerGroups]

SearchFor               = InnerCombinatorial

[OuterTags]
# Set the parameters for the *outer* tag (if hierarchical tagging)
# below.
Search                  = True
TrimType                = Single
Buffer                  = 5
ThreePrimeOrientation   = Reverse
Trim                    = 0
FuzzyMatching           = True
AllowedErrors           = 1

[InnerTags]
# Set the parameters for the *inner* tag (if hierarchical tagging)
# below.
Search                  = True
TrimType                = Both
Buffer                  = 0
ThreePrimeOrientation   = Forward
Trim                    = 0
FuzzyMatching           = True
AllowedErrors           = 1


# =======================
# = Sequence Tag Groups =
# =======================

[InnerCombinatorial]
Tag1,TagA = A1
Tag2,TagA = A2
Tag3,TagA = A3
Tag4,TagA = A4
Tag5,TagA = A5
Tag6,TagA = A6
Tag7,TagA = A7
Tag8,TagA = A8
Tag9,TagA = A9
Tag10,TagA = A10
Tag11,TagA = A11
Tag12,TagA = A12
Tag1,TagB = B1
Tag2,TagB = B2
Tag3,TagB = B3
Tag4,TagB = B4
Tag5,TagB = B5
Tag6,TagB = B6
Tag7,TagB = B7
Tag8,TagB = B8
Tag9,TagB = B9
Tag10,TagB = B10
Tag11,TagB = B11
Tag12,TagB = B12
Tag1,TagC = C1
Tag2,TagC = C2
Tag3,TagC = C3
Tag4,TagC = C4
Tag5,TagC = C5
Tag6,TagC = C6
Tag7,TagC = C7
Tag8,TagC = C8
Tag9,TagC = C9
Tag10,TagC = C10
Tag11,TagC = C11
Tag12,TagC = C12
Tag1,TagD = D1
Tag2,TagD = D2
Tag3,TagD = D3
Tag4,TagD = D4
Tag5,TagD = D5
Tag6,TagD = D6
Tag7,TagD = D7
Tag8,TagD = D8
Tag9,TagD = D9
Tag10,TagD = D10
Tag11,TagD = D11
Tag12,TagD = D12
Tag1,TagE = E1
Tag2,TagE = E2
Tag3,TagE = E3
Tag4,TagE = E4
Tag5,TagE = E5
Tag6,TagE = E6
Tag7,TagE = E7
Tag8,TagE = E8
Tag9,TagE = E9
Tag10,TagE = E10
Tag11,TagE = E11
Tag12,TagE = E12
Tag1,TagF = F1
Tag2,TagF = F2
Tag3,TagF = F3
Tag4,TagF = F4
Tag5,TagF = F5
Tag6,TagF = F6
Tag7,TagF = F7
Tag8,TagF = F8
Tag9,TagF = F9
Tag10,TagF = F10
Tag11,TagF = F11
Tag12,TagF = F12
Tag1,TagG = G1
Tag2,TagG = G2
Tag3,TagG = G3
Tag4,TagG = G4
Tag5,TagG = G5
Tag6,TagG = G6
Tag7,TagG = G7
Tag8,TagG = G8
Tag9,TagG = G9
Tag10,TagG = G10
Tag11,TagG = G11
Tag12,TagG = G12
Tag1,TagH = H1
Tag2,TagH = H2
Tag3,TagH = H3
Tag4,TagH = H4
Tag5,TagH = H5
Tag6,TagH = H6
Tag7,TagH = H7
Tag8,TagH = H8
Tag9,TagH = H9
Tag10,TagH = H10
Tag11,TagH = H11
Tag12,TagH = H12  

## Sequence Tag Section (ADVANCED)

[InnerTagSequences]
# A full list of linker tags.  There may be more linker tags listed here than 
# used in the [LinkerGroups] or [MidLinkerGroups] section.  When you run the
# program, it will intelligently create the lists of linkers that you need
# according to the cluster variables you declare in [LinkerGroups] or 
# [MidLinkerGroups]
#
# The only slowdown caused by having a long list of tags here occurs when you 
# run `levenshtein.py` on this file, because it will check all of the tags in 
# the appropriate list for the section chosen.
#
# The longer the tag sequence used, the slower the search for that sequence when 
# using 'fuzzy'-matching.  Thus, if you are using tags that all
# share common elements, you do not need to search for those elements, because 
# they do not differentiate your tags in any manner.  Rather, you can exlude 
# them, and use the MidGap and LinkerGap parameters in the [GeneralParameters] 
# section to exclude these regions
Tag1 = TGCAT
Tag2 = ACCGA 
Tag3 = CCTAT
Tag4 = GTCAA
Tag5 = TCAGC
Tag6 = AACAC
Tag7 = CATGA
Tag8 = GGATG
Tag9 = TTGAC
Tag10 = ACAAG
Tag11 = CGGTT
Tag12 = GGTAC
TagA = ATCTG 
TagB = CACCT
TagC = GAAGT
TagD = ACGTC
TagE = AGACT
TagF = AAGCG
TagG = CCACA
TagH = GCTTA

