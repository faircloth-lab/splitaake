# ===========================
# = Multiprocessing options =
# ===========================

[Multiprocessing]
# Here you can set whether you want to use multiprocessing
# (typically you do).  You can let the program automatically determine
# the optimum number of cores to use (max[cores] - 2) or you can set the
# number of cores manually, e.g. to `4`.  Regardless of what you do here
# the program will use n - 1 cores to process data and 1 core to enter
# data to the database.  Should you wish to change this behavior, you
# will need to edit the source.
#
# If you edit the source, remember that SQLITE (the database we're using) 
# will not accept input from multiple processes/threads simultaneously.  Thus,
# you will likely have to create a new demuxi/db.py file for your respective
# database platform.
MULTIPROCESSING     = False
PROCESSORS          = 2

[Database]
# The name of your database. If you would like to store this somewhere
# other than where this configuration files is located, prepend the 
# database name with the desired path.  The database engine is SQLITE.
# You may alter the database engine by writing your own demuxi/db.conf.
DATABASE            = linkerpy.sqlite

[Sequence]
# paths to the input fasta and qual files
fasta               = '454_test_sequence.fasta'
quality             = '454_test_sequence.qual'

[Quality]
# Trim reads by quality scores (prior to looking for sequence tags)
QualTrim                = True
MinQualScore            = 10

[Concatemers]
# We can implement checking for concatemers (a linker within a sequence)
# but it is slow, particularly if we allow errors withint the concatemer
# sequence.
#
# Here, we ONLY search for concatemers containing the Linker sequences.
#
# Additionally, if you enable the option to allow errors, you
# should keep the error count low or you will start matching parts of
# your reads, which will be confusing.
ConcatemerChecking      = True
# By default, we just use regular expressions to match reads with exact
# matches to the adapters within them.
ConcatemerFuzzyMatching = True
ConcatemerAllowedErrors = 1


[Search]
# Give the combination of tags to search for:
#
# 1) OuterInnerGroups - the typical hierarchical tagging pattern.
# Identifies reads using an outer + inner tag.
#
# 2) InnerGroups - those reads having only "inner" tags,
# Identifies reads using only the inner tag.
#
# 3) OuterGroups - those reads having only "outer" tags.
# Idenfified reads using only the outer tag.
#
# You may select either of InnerGroups or OuterGroups if
# you are only using 1 tag to identify your reads.  However, ensure that
# you have provided the correct options below for the appropriate
# tags [OuterTags] or [InnerTags] and mapping of group names to tag
# combinations [OuterGroups], [InnerGroups], [OuterInnerGroups]

SearchFor               = OuterInnerGroups

[OuterTags]
# Set the parameters for the *outer* tag (if hierarchical tagging)
# below.
Search                  = True
TrimType                = Single
Buffer                  = 5
ThreePrimeOrientation   = Reverse
Trim                    = 0
FuzzyMatching           = True
AllowedErrors           = 1

[InnerTags]
# Set the parameters for the *inner* tag (if hierarchical tagging)
# below.
Search                  = True
TrimType                = Both
Buffer                  = 5
ThreePrimeOrientation   = Reverse
Trim                    = 0
FuzzyMatching           = True
AllowedErrors           = 1


# =======================
# = Sequence Tag Groups =
# =======================

[OuterGroups]
# If you are searching for MIDs only, denote what each MID 'means'
# in this section.  The label you use here will be the label linked to your
# sequences in the database that is created.
MID15 = shrimp
MID16 = lobsters

[InnerGroups]
# If you are searching for Linkers only, denote what each Linker 
# 'means' in this section.  The label you use here will be the label linked to 
# your sequences in the database that is created.
SimpleX1 = walrus
SimpleX2 = whale
SimpleX3 = porpoise

[OuterInnerGroups]
# If you have hierarchically tagged your reads, denote what each combination
# of MID + Linker means. The label you use here will be the label 
# linked to your sequences in the database that is created.
MID15, SimpleX1 = cat
MID15, SimpleX2 = dog
MID16, SimpleX1 = pony

[InnerCombinatorial]
SimpleX1, SimpleX2 = duck
SimpleX2, SimpleX1 = goose

[OuterCombinatorial]
MID15, MID16 = cat
MID16, MID15 = dog

[HierarchicalCombinatorial]
MID16,SimpleX1,SimpleX2,MID16 = bushbaby
MID16,SimpleX2,SimpleX1,MID16 = hedgehog
MID15,SimpleX2,SimpleX1,MID15 = opossum
MID15,SimpleX1,SimpleX2,MID15 = newt


[TestCombos]
SimpleX1,SimpleX2 = duck
SimpleX1, SimpleX2 = duck
SimpleX1,  SimpleX2 = duck

## Sequence Tag Section (ADVANCED)

[OuterTagSequences]
# A full list of MID tags.  There may be more MID tags listed here than 
# used in the [MidGroups] or [MidLinkerGroups] section.  When you run the 
# program, it intelligently creates the list of MIDs that you used
# according to the cluster variables you declare in [MidGroups] or
# [MidLinkerGroups].  In fact, you would never want to run all of the tags  
# listed below together, because the edit-distances would be lower than what 
# you want (e.g. between RLMIDs and MIDs)
#
# The only slowdown caused by having a long list of tags here occurs when you 
# run `levenshtein.py` on this file, because it will check all of the tags in 
# the appropriate list for the section chosen.
MID15     = ATACGACGTA
MID16     = TCACGTACTA
MID17     = CGTCTAGTAC

[InnerTagSequences]
# A full list of linker tags.  There may be more linker tags listed here than 
# used in the [LinkerGroups] or [MidLinkerGroups] section.  When you run the
# program, it will intelligently create the lists of linkers that you need
# according to the cluster variables you declare in [LinkerGroups] or 
# [MidLinkerGroups]
#
# The only slowdown caused by having a long list of tags here occurs when you 
# run `levenshtein.py` on this file, because it will check all of the tags in 
# the appropriate list for the section chosen.
#
# The longer the tag sequence used, the slower the search for that sequence when 
# using 'fuzzy'-matching.  Thus, if you are using tags that all
# share common elements, you do not need to search for those elements, because 
# they do not differentiate your tags in any manner.  Rather, you can exlude 
# them, and use the MidGap and LinkerGap parameters in the [GeneralParameters] 
# section to exclude these regions
SimpleX1    = CGTCGTGCGGAATC
SimpleX2    = GCTGCTGGCGAATC
SimpleX3    = CGTGCTGCGGAACT

